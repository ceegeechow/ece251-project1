C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/21/2017 16:03:28 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src/Interrupts.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/camille/SimplicityStudio/v4_workspace/EFM8BB3_Timer0_8bitReload_3/src/Interrupts.c OMF2 SMALL DEBUG OBJECTEXT
                    -END ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/User
                    -s/camille/SimplicityStudio/v4_workspace/EFM8BB3_Timer0_8bitReload_3/inc;/Applications/Simplicity Studio.app/Contents/Ecl
                    -ipse/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer
                    -/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/Inter
                    -rupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8BB3_Register_Enums.h>
  12          
  13          //-----------------------------------------------------------------------------
  14          // Global Constants
  15          //-----------------------------------------------------------------------------
  16          // Configurator set for HFOSC0/8
  17          #define SYSCLK             3062000
  18          
  19          // Configurator set for timer overflow every 100 ms / 10 Hz.
  20          #define TOGGLE_RATE           100  // LED toggle rate in milliseconds
  21                                                 // if LED_TOGGLE_RATE = 1, the LED will
  22                                                 // be on for 1 millisecond and off for
  23                                                 // 1 millisecond
  24          
  25          //-----------------------------------------------------------------------------
  26          // Pin Definitions
  27          //-----------------------------------------------------------------------------
  28          SI_SBIT(OUT, SFR_P0, 1);
  29          
  30          SI_SBIT (LED_GREEN, SFR_P1, 4);           // green LED
  31          SI_SBIT (LED_BLUE,  SFR_P1, 5);           // blue LED
  32          SI_SBIT (LED_RED,  SFR_P1, 6);           // red LED
  33          //-----------------------------------------------------------------------------
  34          // TIMER0_ISR
  35          //-----------------------------------------------------------------------------
  36          //
  37          // TIMER0 ISR Content goes here. Remember to clear flag bits:
  38          // TCON::TF0 (Timer 0 Overflow Flag)
  39          //
  40          // Here we process the Timer0 interrupt and toggle the LED when appropriate
  41          //
  42          //-----------------------------------------------------------------------------
  43          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
  44          {
  45   1         static uint16_t counter = 0;
  46   1      
  47   1         counter++;
  48   1      
  49   1         if(counter == TOGGLE_RATE)
  50   1         {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/21/2017 16:03:28 PAGE 2   

  51   2                LED_GREEN = !LED_GREEN;                    // Toggle the output pin
  52   2                counter = 0;
  53   2         }
  54   1      }
  55          
  56          //-----------------------------------------------------------------------------
  57          // INT0_ISR
  58          //-----------------------------------------------------------------------------
  59          //
  60          // INT0 ISR Content goes here. Remember to clear flag bits:
  61          // TCON::IE0 (External Interrupt 0)
  62          //
  63          // Whenever a negative edge appears on P0.2, toggle LED_GREEN.
  64          // The interrupt pending flag is automatically cleared by vectoring to the ISR
  65          //
  66          //-----------------------------------------------------------------------------
  67          SI_INTERRUPT (INT0_ISR, INT0_IRQn) //lap interrupt
  68          {
  69   1        LED_BLUE = !LED_BLUE;
  70   1      }
  71          
  72          //-----------------------------------------------------------------------------
  73          // INT1_ISR
  74          //-----------------------------------------------------------------------------
  75          //
  76          // INT1 ISR Content goes here. Remember to clear flag bits:
  77          // TCON::IE1 (External Interrupt 1)
  78          //
  79          // Whenever a negative edge appears on P0.3, toggle LED_BLUE.
  80          // The interrupt pending flag is automatically cleared by vectoring to the ISR
  81          //
  82          //-----------------------------------------------------------------------------
  83          SI_INTERRUPT (INT1_ISR, INT1_IRQn) //start/stop interrupt
  84          {
  85   1         IE_ET0 = !IE_ET0;
  86   1      }
  87          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     40    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
