C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2017 18:19:24 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src/Interrupts.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/camille/SimplicityStudio/v4_workspace/EFM8BB3_ExternalInterrupts_2/src/Interrupts.c OMF2 SMALL DEBUG OBJECTEX
                    -TEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Use
                    -rs/camille/SimplicityStudio/v4_workspace/EFM8BB3_ExternalInterrupts_2/inc;/Applications/Simplicity Studio.app/Contents/E
                    -clipse/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents/Eclipse/develop
                    -er/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/Int
                    -errupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8BB3_Register_Enums.h>
  12          
  13          #define SYSCLK             3062000
  14          
  15          // Configurator set for timer overflow every 100 ms / 10 Hz.
  16          #define LED_TOGGLE_RATE           100  // LED toggle rate in milliseconds
  17                                                 // if LED_TOGGLE_RATE = 1, the LED will
  18                                                 // be on for 1 millisecond and off for
  19                                                 // 1 millisecond
  20          
  21          //-----------------------------------------------------------------------------
  22          // Pin Declarations
  23          //-----------------------------------------------------------------------------
  24          SI_SBIT (LED_GREEN, SFR_P1, 4);           // green LED
  25          SI_SBIT (LED_BLUE,  SFR_P1, 5);           // blue LED
  26          SI_SBIT (LED_RED,  SFR_P1, 6);           // red LED
  27          
  28          //-----------------------------------------------------------------------------
  29          // INT0_ISR
  30          //-----------------------------------------------------------------------------
  31          //
  32          // INT0 ISR Content goes here. Remember to clear flag bits:
  33          // TCON::IE0 (External Interrupt 0)
  34          //
  35          // Whenever a negative edge appears on P0.2, toggle LED_GREEN.
  36          // The interrupt pending flag is automatically cleared by vectoring to the ISR
  37          //
  38          //-----------------------------------------------------------------------------
  39          SI_INTERRUPT (INT0_ISR, INT0_IRQn)
  40          {
  41   1         LED_GREEN = !LED_GREEN;
  42   1      }
  43          
  44          //-----------------------------------------------------------------------------
  45          // INT1_ISR
  46          //-----------------------------------------------------------------------------
  47          //
  48          // INT1 ISR Content goes here. Remember to clear flag bits:
  49          // TCON::IE1 (External Interrupt 1)
  50          //
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2017 18:19:24 PAGE 2   

  51          // Whenever a negative edge appears on P0.3, toggle LED_BLUE.
  52          // The interrupt pending flag is automatically cleared by vectoring to the ISR
  53          //
  54          //-----------------------------------------------------------------------------
  55          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
  56          {
  57   1         LED_BLUE = !LED_BLUE;
  58   1      }
  59          
  60          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
  61          {
  62   1         static uint16_t counter = 0;
  63   1      
  64   1         counter++;
  65   1      
  66   1         if(counter == LED_TOGGLE_RATE)
  67   1         {
  68   2                LED_GREEN = !LED_GREEN;                    // Toggle the LED
  69   2                counter = 0;
  70   2         }
  71   1      }
  72          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     40    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
